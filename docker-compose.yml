services:
  postgres:
    container_name: ms_postgres_sql
    image: postgres
    environment:
      POSTGRES_USER: andd
      POSTGRES_PASSWORD: pgAnDD1102
      PGDATA: /var/lib/postgresql/data
    volumes:
    - postgres:/var/lib/postgresql/data
    ports:
    - 5432:5432
    networks:
    - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
    - pgadmin:/var/lib/pgadmin
    ports:
    - 5050:80
    networks:
    - microservices-net
    restart: unless-stopped

  mongodb:
    container_name: ms_mongo_db
    image: mongo
    ports:
    - 27017:27017
    volumes:
    - mongo:/data
    environment:
    - MONGO_INITDB_ROOT_USERNAME=andd
    - MONGO_INITDB_ROOT_PASSWORD=mgAnDD1102

  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express
    restart: unless-stopped
    ports:
    - 8081:8081
    environment:
    - ME_CONFIG_MONGODB_ADMINUSERNAME=andd
    - ME_CONFIG_MONGODB_ADMINPASSWORD=mgAnDD1102
    - ME_CONFIG_MONGODB_SERVER=mongodb

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
    - 22181:2181
    networks:
    - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
    - 9092:9092
    depends_on:
    - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms_kafka:9092
    networks:
    - microservices-net

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
    - 1080:1080
    - 1025:1025

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices-net

  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak:24.0.2
    ports:
    - 9098:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    networks:
      - microservices-net
    command:
      - "start-dev"

  ## Config Server
  config-server:
    container_name: config-server
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    image: config-server:latest
    ports:
      - "8888:8888"
    networks:
      - microservices-net
    depends_on:
      - zipkin

  ## Discovery Service
  discovery-service:
    container_name: discovery-service
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    image: discovery-service:latest
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
  ## Customer Service
  customer-service:
    container_name: customer-service
    build:
      context: ./services/customer
      dockerfile: Dockerfile
    image: customer-service:latest
    ports:
      - "8090:8090"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service
      - mongodb

  ## Gateway Service
  gateway-service:
    container_name: gateway-service
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    image: gateway-service:latest
    ports:
      - "8222:8222"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service

  ## Notification Service
  notification-service:
    container_name: notification-service
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    image: notification-service:latest
    ports:
      - "8040:8040"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service
      - mail-dev
      - kafka
      - mongodb

  ## Order Service
  order-service:
    container_name: order-service
    build:
      context: ./services/order
      dockerfile: Dockerfile
    image: order-service:latest
    ports:
      - "8070:8070"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service
      - postgres
      - kafka
      - customer-service
      - payment-service
      - product-service

  ## payment Service
  payment-service:
    container_name: payment-service
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    image: payment-service:latest
    ports:
      - "8060:8060"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service
      - postgres
      - kafka

  ## product Service
  product-service:
    container_name: product-service
    build:
      context: ./services/product
      dockerfile: Dockerfile
    image: product-service:latest
    ports:
      - "8050:8050"
    networks:
      - microservices-net
    depends_on:
      - zipkin
      - config-server
      - discovery-service
      - postgres
networks:
  microservices-net:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  mongo: